[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "docstring-adder"
version = "0.1.0"
authors = [{ name = "Alex Waygood", email = "alex.waygood@gmail.com" }]
description = "Tool to add docstrings to stubs."
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.9"
dependencies = [
    "libcst>=1.8.2",
    "termcolor>=3.1.0",
    "tomli>=2.2.1",
    "typeshed-client @ git+https://github.com/JelleZijlstra/typeshed_client@dc933baf47b3df4bbaf4e3f2d6a1fe238e6c7c68",
    # So that we can add docs for `typing_extensions` APIs:
    "typing_extensions",
    # for dynamically installing typeshed packages
    "uv",
]
keywords = ["typing", "stubs"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Software Development",
]

[project.urls]
"Homepage" = "https://github.com/AlexWaygood/docstring-adder"
"Bug Tracker" = "https://github.com/AlexWaygood/docstring-adder/issues"

[project.scripts]
add-docstrings = "add_docstrings:_main"

[tool.hatch.build.targets.wheel]
include = ["add_docstrings.py"]

[tool.hatch.metadata]
allow-direct-references = true

[dependency-groups]
dev = ["mypy==1.17.0"]

[tool.mypy]
files = ['*.py']
show_traceback = true
pretty = true
strict = true
enable_error_code = 'ignore-without-code,redundant-expr,possibly-undefined'
warn_unreachable = true
local_partial_types = true
allow_redefinition = true
python_version = "3.9"

[tool.ruff]
fix = true
preview = true
line-length = 88

[tool.ruff.format]
docstring-code-format = true
skip-magic-trailing-comma = true

[tool.ruff.lint]
select = [
    "ARG",
    "B",
    "B9",
    "D",
    "E",
    "EXE",
    "F",
    "I",
    "ISC",
    "PGH",
    "PYI",
    "PT",
    "RUF",
    "SIM",
    "UP",
    "PLW0127",
    "FURB101",
    "FURB103",
    "PLW1510",
]
ignore = [
    # Unnecessarily strict/pedantic
    "D107",
    "D202",
    # These are all enforced by, or incompatible with, the ruff formatter:
    "E203",
    "E501",
    "W291",
    "W293",
    # It's often necessary to compare types instead of using isinstance()
    "E721",
    "RUF005",
    # Let mypy/pyright complain about blanket type ignores or implicit optional
    "PGH004",
    "RUF013",
    # Makes code slower and more verbose
    # https://github.com/astral-sh/ruff/issues/7871
    "UP038",
]
unfixable = [
    "F841",    # unused variable. ruff keeps the call, but mostly we want to get rid of it all
    "F601",    # automatic fix might obscure issue
    "F602",    # automatic fix might obscure issue
    "B018",    # automatic fix might obscure issue
    "PLW1510", # automatic fix might obscure issue
    "RUF017",  # Ruff's fix is faster, but I prefer using itertools.chain_from_iterable
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
combine-as-imports = true
split-on-trailing-comma = false
